#!/usr/bin/env shource
# vim: autoindent tabstop=4 shiftwidth=4 expandtab softtabstop=4 ft=sh

set -e # Exit on any error. Use `COMMAND || true` to nullify
set -E # Functions inherit error trap
set -u # Error on unset variables. Use ${var:-alternate value} to bypass
set -f # Error on failed file globs (e.g. *.txt )
set -o pipefail # Failed commands in pipes cause the whole pipe to fail

LOG_LEVEL=0

readonly seperator=":woeruweznorweorqweorweorqwoerqweorqwoer:"

function main()
{(
    local watch_file="$1"
    local log_tag="$2"
    local call_this="$3"
    local watch="$4"
    local update="$5"
    shift 5
    local arguments=( "${@}" )

    if $update; then
        update_file "$watch_file" "$log_tag" "${arguments[@]}"
    elif $watch; then
        watch_file "$watch_file" "$log_tag" "$call_this"
    fi
)}

function update_file(){(
    local watch_file="$1"
    local log_tag="$2"
    shift 2
    local arguments=( "${@}" )
    local uuid="$( date +%s%3N)-$((RANDOM))"

    {
        printf "%s$seperator" "$uuid" "${arguments[@]}"
        printf "\n"
    } | sed "s/$seperator$//" | tee -a "$watch_file" | logger -t "$log_tag"
)}

function watch_file(){(
    local watch_file="$1"
    local log_tag="$2"
    local command="$3"

    mkfifo "$watch_file"  || true

    if ! [[ -p "$watch_file" ]]; then
        log 0 "Your watch file $watch_file is not a pipe. Please delete your watch file or spec a new/different file that either doesn't exist or is a named pipe."
        exit 1
    fi

    tail -f "$watch_file" | while read line; do
        if [[ $line == completed* ]]; then
            continue
        fi

        local args=()
        local index=2
        local uuid="${line%%$seperator*}"

        while word=$( echo "$line" |  awk -F"$seperator" "{ if( $index <= NF ){ print \$$index;} else { exit 1; } }"); do
            index=$(( index + 1 ))
            args+=( "$word" )
        done

        full_command=( $command "${args[@]}" )
        {
            printf -- "- %s\n" "${full_command[@]}"
            if ! "${full_command[@]}"; then
                echo "Error running command: ${full_command[@]}"
            fi
        } 2>&1 | logger -t "${log_tag}"
    done 
)}


function _display_help()
{
    cat - > >( sed -r -e "s/^ {,8}//" ) <<EOF
        Sample help file
        TADA!
EOF
}

shource parse_args()
shource log()
shource traps()

# Check if any of the args are a cry for help
if echo "${@}" | grep -q -wiEe "-h|--help|help"; then
    _display_help
    exit 4
fi

parse_args update:bool watch:bool arg:array -- "${@}"
main "${watch_file:-/tmp/usb-watcher.pipe}" "${log_tag:-usb-watcher}" "${call_this:-}" "${watch:-false}" "${update:-false}" "${arg[@]}"

exit $?
